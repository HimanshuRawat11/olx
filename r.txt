#     # Check if the type of product is carModel (assuming it can be checked via `type` field)
                #     # After deserialization, we might need to check if the type is carModel
                #     product_instance = product_serializer.save()  # Create the Product instance
                    
                #     # Now, check if the instance is of type carModel
                #     if isinstance(product_instance, productStore):
                #         print("This is a car model!")
                # productserializer=carAdSerializer(data=data)
                # # imageserializer=addImageSerializer(data=photos)
                # if productserializer.is_valid():
                #     productserializer.save()
                #     # users=self.products.get(id=1)
                #     # user1=carModel.objects.get(productstore_ptr_id=users)
                #     # print(user1.type)
                #     # imageserializer.save()
                #     return Response({"message":"The Ad was created"})

                    
                # serializer=createAdSerializer(data=data)
                # if serializer.is_valid():
                #         product_saved=serializer.save()
                #         # product_photos_list = []
                #         for val in photos.values():
                #             product_photos.objects.create(product=product_saved,photos=val)
                #             # product_photos_list.append(product_photos(product=product_saved, photos=val))
                #         # product_photos.objects.bulk_create(product_photos_list)
                #         return Response({"message":"Saved Successfully"},status=status.HTTP_201_CREATED)


            TO CREATE DICTIONARY FOR NEW PRODUCT AND REMOVING THE ATTRIBUTES
            
             # product_data["user_id"]=User.objects.get(id=request.user.id)
                # product_data["display_photo"]=photos[0]
                # photos.pop(0)
                # product_data["category"]=category
                # product_data["subcategory"]=subcategory
                # product_data["ad_title"]=data["ad_title"]
                # product_data["price"]=data["price"]
                # product_data["description"]=data["description"]
                # product_data["state"]=data["state"]
                # product_data["city"]=data["city"]
                # product_data["district"]=data["district"]
                
                # category=data.get("category")
                # subcategory=data.get("subcategory")
                # data.pop("category")
                # data.pop("subcategory")
                # data.pop("ad_title")
                # data.pop("price")
                # data.pop("description")
                # data.pop("state")
                # data.pop("city")
                # data.pop("district")
                # data.pop("photo")
            
            
            
            
            TO CREATE NEW PRODUCT DETAILS AND photos


                 # product_created=productStore.objects.create(**product_data)
            # print(data)
            # for key,val in data.items():
            #     print(key,val)
            #     att=ProductTitles.objects.filter(category=category).filter(sub_category=subcategory).get(title=key)
            #     ProductDetails.objects.create(product=product_created,title=att,value=val)
            # for val in photos:
            #     product_photos.objects.create(product=product_created,photos=val)


Loop for iteratinig through the chats to display in the homepage


    # async for chat in Chat.objects.filter(participants__id=user.id):
    #     chat_items={}
    #     chat_items["chat_id"]=chat.id
    #     chat_items["chat_name"]=chat.name
    #     chat_items["is_group"]=chat.is_group
    #     chat_items["unread_message"] = await Message.objects.filter(
    #     chat__id=chat.id,is_read=False,chat__participants__id=user.id
    # ).values('chat_id').annotate(count=Count('text')).order_by('chat_id').exclude(sender=user).afirst()
    #     chat_items["last_message"]=await Message.objects.filter(chat=chat).values('text','timestamp').order_by('timestamp').alast()
    #     chat_details.append(chat_items)